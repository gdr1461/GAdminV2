"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[488],{57901:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>d,default:()=>c,frontMatter:()=>m,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"Command","title":"Command","description":"Commands in GAdmin are pre-defined modules that execute when a chat command is used.","source":"@site/docs/Command.md","sourceDirName":".","slug":"/Command","permalink":"/GAdminV2/docs/Command","draft":false,"unlisted":false,"editUrl":"https://github.com/gdr1461/GAdminV2/edit/main/docs/Command.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"defaultSidebar","previous":{"title":"Addon Examples","permalink":"/GAdminV2/docs/AddonExamples"},"next":{"title":"Command Arguments","permalink":"/GAdminV2/docs/Arguments"}}');var a=r(74848),o=r(28453);const m={sidebar_position:7},d="Command",s={},i=[{value:"Features",id:"features",level:2},{value:"Templates",id:"templates",level:2},{value:"Bring",id:"bring",level:3},{value:"Shutdown",id:"shutdown",level:3},{value:"ChatLogs",id:"chatlogs",level:3},{value:"Countdown",id:"countdown",level:3}];function l(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"command",children:"Command"})}),"\n",(0,a.jsxs)(e.p,{children:["Commands in GAdmin are pre-defined modules that execute when a chat command is used. ",(0,a.jsx)("br",{}),"\r\nExample: ",(0,a.jsx)(e.code,{children:";fly me"})," triggers the Fly module command. ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(e.p,{children:["GAdmin chat commands offer a flexible API that can be customized to your needs. You can set the required rank to use a command, define flexible arguments with custom autocompletion, and support both ",(0,a.jsx)(e.code,{children:"server"})," and ",(0,a.jsx)(e.code,{children:"client"})," execution \u2014 all within a single module."]}),"\n",(0,a.jsx)(e.h2,{id:"templates",children:"Templates"}),"\n",(0,a.jsx)(e.admonition,{type:"info",children:(0,a.jsxs)(e.p,{children:["For a better understanding of how arguments work, see ",(0,a.jsx)(e.a,{href:"/docs/Arguments",children:"Command Arguments"}),"."]})}),"\n",(0,a.jsx)(e.p,{children:"The standard structure of a GAdmin command follows a specific format:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:"local Command = {}\r\nCommand.Name: string -- Unique name of custom command.\r\n\r\nCommand.Alias: array -- Other names of your command. Needs to be unique too.\r\nCommand.Description: string -- Description of your command.\r\n\r\nCommand.Rank: string | number -- Rank required to use command.\r\nCommand.Fluid: boolean --[[ Will API be able to send updates to the client for this\r\ncommand and will UpPeRcAsE matter when you call command in the chat. ]]\r\n\r\nCommand.Arguments: array -- Arguments that you may need for your own command.\r\n\r\nCommand.Server = {} -- Server side.\r\nCommand.Client = {} -- Client side.\r\n\r\n--== << Server >>\r\n-- Run command on the server.\r\nfunction Command.Server:Run(Caller, Arguments)\r\n\t...\r\nend\r\n\r\n-- What services your command need on the server side.\r\nfunction Command.Server:Get(Services)\r\n\t...\r\nend\r\n\r\n--== << Client >>\r\n-- Run command on the client.\r\nfunction Command.Client:Run(Caller, Arguments)\r\n\t...\r\nend\r\n\r\n-- What services your command need on the client side.\r\nfunction Command.Client:Get(Services)\r\n\t...\r\nend\r\n\r\nreturn Command\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Here's some examples of commands for you to reference: ",(0,a.jsx)("br",{})]}),"\n",(0,a.jsx)(e.h3,{id:"bring",children:"Bring"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local Command = {}\r\nCommand.Name = "Bring"\r\n\r\nCommand.Alias = {"Br"}\r\nCommand.Description = "Teleports player to you."\r\n\r\nCommand.Rank = 2\r\nCommand.Fluid = true\r\n\r\nCommand.Arguments = {\r\n\t{\r\n\t\tName = "Player",\r\n\t\tTypes = {"Player"},\r\n\t\tRank = 2,\r\n\r\n\t\tFlags = {"PlayerOnline"},\r\n\t\tSpecifics = {},\r\n\t},\r\n}\r\n\r\nCommand.Server = {}\r\nCommand.Client = {}\r\n\r\n--== << Server >>\r\nfunction Command.Server:Run(Caller, Arguments)\r\n\tlocal player = Arguments[1]\r\n\tlocal Position = Caller.Character:GetPivot() * CFrame.Angles(0, math.rad(180), 0)\r\n\tplayer.Character:PivotTo(Position)\r\nend\r\n\r\nreturn Command\n'})}),"\n",(0,a.jsx)(e.h3,{id:"shutdown",children:"Shutdown"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local Command = {}\r\nCommand.Name = "Shutdown"\r\n\r\nCommand.Alias = {}\r\nCommand.Description = "Shutdowns current server with specified reason if any."\r\n\r\nCommand.Rank = 4\r\nCommand.Fluid = true\r\n\r\nCommand.Arguments = {\r\n\t{\r\n\t\tName = "Reason",\r\n\t\tTypes = {"string"},\r\n\t\tRank = 3,\r\n\t\t\r\n\t\tFlags = {"Optional", "Infinite", "ToFilter"},\r\n\t\tSpecifics = {},\r\n\t}\r\n}\r\n\r\nCommand.Server = {}\r\nCommand.Client = {}\r\n\r\n--== << Server >>\r\nfunction Command.Server:Run(Caller, Arguments)\r\n\tlocal Reason = Arguments[1] or `By @{Caller.Name}`\r\n\tself.API:Shutdown(Reason)\r\nend\r\n\r\nfunction Command.Server:Get(Services)\r\n\treturn {\r\n\t\tAPI = Services.API\r\n\t}\r\nend\r\n\r\nreturn Command\n'})}),"\n",(0,a.jsx)(e.h3,{id:"chatlogs",children:"ChatLogs"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'--== << Services >>\r\nlocal Main = script:FindFirstAncestor("GAdminShared")\r\nlocal HumanoidProperty = require(Main.Shared.Services.Core.HumanoidProperty)\r\n\r\nlocal Properties = HumanoidProperty:GetList()\r\nlocal Property = ""\r\n--==\r\n\r\nlocal Command = {}\r\nCommand.Name = "ChatLogs"\r\n\r\nCommand.Alias = {"CLogs"}\r\nCommand.Description = "Shows chat logs."\r\n\r\nCommand.Rank = 2\r\nCommand.Fluid = true\r\n\r\nCommand.Arguments = {\r\n\t{\r\n\t\tName = "Player",\r\n\t\tTypes = {"Player"},\r\n\t\tRank = 3,\r\n\r\n\t\tFlags = {"Optional", "PlayerOnline", "PlayerClient"},\r\n\t\tSpecifics = {},\r\n\t},\r\n}\r\n\r\nCommand.Server = {}\r\nCommand.Client = {}\r\n\r\n--== << Client >>\r\nfunction Command.Client:Run(Caller, Arguments)\r\n\t_G.GAdmin.Framework.Interface:Refresh({\r\n\t\tPlace = "_Logs",\r\n\t\tPage = 1,\r\n\t\tMaxPages = 1,\r\n\t\tArguments = {\r\n\t\t\tType = "ChatLogs",\r\n\t\t},\r\n\t})\r\nend\r\n\r\nreturn Command\n'})}),"\n",(0,a.jsx)(e.h3,{id:"countdown",children:"Countdown"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-lua",children:'local Command = {}\r\nCommand.Name = "Countdown"\r\n\r\nCommand.Alias = {"Count", "CD"}\r\nCommand.Description = "Count downs time."\r\n\r\nCommand.Rank = 2\r\nCommand.Fluid = true\r\n\r\nCommand.Arguments = {\r\n\t{\r\n\t\tName = "Time",\r\n\t\tTypes = {"number"},\r\n\t\tRank = 2,\r\n\r\n\t\tFlags = {},\r\n\t\tSpecifics = {},\r\n\t},\r\n}\r\n\r\nCommand.Server = {}\r\nCommand.Client = {}\r\n\r\n--== << Server >>\r\nfunction Command.Server:Run(Caller, Arguments)\r\n\tlocal Time = math.clamp(Arguments[1], 1, 99)\r\n\tfor i = Time, 1, -1 do\r\n\t\tself.Remote:FireAll("SysMessage", {\r\n\t\t\tType = "Center",\r\n\t\t\tFrom = `Server`,\r\n\t\t\tMessage = i,\r\n\t\t\tTime = 1,\r\n\t\t\tSkipTween = i ~= Time,\r\n\t\t})\r\n\t\t\r\n\t\ttask.wait()\r\n\tend\r\nend\r\n\r\nfunction Command.Server:Get(Services)\r\n\treturn {\r\n\t\tRemote = Services.Remote\r\n\t}\r\nend\r\n\r\nreturn Command\n'})})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>m,x:()=>d});var t=r(96540);const a={},o=t.createContext(a);function m(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:m(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);
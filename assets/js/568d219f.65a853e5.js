"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[516],{94943:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Arguments","title":"Command Arguments","description":"Almost every command requires arguments to function. If you are creating your own command, chances are you will need some type of argument for it.","source":"@site/docs/Arguments.md","sourceDirName":".","slug":"/Arguments","permalink":"/GAdminV2/docs/Arguments","draft":false,"unlisted":false,"editUrl":"https://github.com/gdr1461/GAdminV2/edit/main/docs/Arguments.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"defaultSidebar","previous":{"title":"Command","permalink":"/GAdminV2/docs/Command"},"next":{"title":"_G","permalink":"/GAdminV2/docs/Global"}}');var i=r(74848),t=r(28453);const l={sidebar_position:8},a="Command Arguments",c={},d=[{value:"Structure",id:"structure",level:2},{value:"Name",id:"name",level:3},{value:"Types",id:"types",level:3},{value:"Rank",id:"rank",level:3},{value:"Flags",id:"flags",level:3},{value:"Specifics",id:"specifics",level:3},{value:"Existing Types",id:"existing-types",level:2},{value:"Player",id:"player",level:3},{value:"Rank",id:"rank-1",level:3},{value:"string",id:"string",level:3},{value:"number",id:"number",level:3},{value:"boolean",id:"boolean",level:3},{value:"Object",id:"object",level:3},{value:"Existing Specifics",id:"existing-specifics",level:2},{value:"AutoFill",id:"autofill",level:3},{value:"AutoFillOverride",id:"autofilloverride",level:3},{value:"ObjectTag",id:"objecttag",level:2},{value:"Structure",id:"structure-1",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"command-arguments",children:"Command Arguments"})}),"\n",(0,i.jsx)(n.p,{children:"Almost every command requires arguments to function. If you are creating your own command, chances are you will need some type of argument for it."}),"\n",(0,i.jsx)(n.p,{children:"Arguments in GAdmin are highly customizable and easy to work with."}),"\n",(0,i.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,i.jsx)(n.p,{children:"To ensure your argument is well-structured, follow this template:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"{\r\n\t\tName: string,\r\n\t\tTypes = {string},\r\n\t\tRank: number | string,\r\n\r\n\t\tFlags = {[key]: value},\r\n\t\tSpecifics = {[key]: value},\r\n\t},\n"})}),"\n",(0,i.jsx)(n.p,{children:"Now, let's go over the explanation of this structure."}),"\n",(0,i.jsx)(n.h3,{id:"name",children:"Name"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"string"})," ",(0,i.jsx)("br",{}),"\r\nThe name of the argument displayed on the Command page. Skip this to use the first argument type as the default."]}),"\n",(0,i.jsx)(n.h3,{id:"types",children:"Types"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"StringArray"})," ",(0,i.jsx)("br",{}),"\r\nTypes used to convert the argument. For example, if your argument is a number type, it will convert the argument ",(0,i.jsx)(n.code,{children:"'3'"})," to ",(0,i.jsx)(n.code,{children:"3"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Learn more about types ",(0,i.jsx)(n.a,{href:"/docs/Arguments#existing-types",children:"here"}),"."]})}),"\n",(0,i.jsx)(n.h3,{id:"rank",children:"Rank"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"number | string"})," ",(0,i.jsx)("br",{}),"\r\nThe rank required to use this argument."]}),"\n",(0,i.jsx)(n.h3,{id:"flags",children:"Flags"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Dictionary"})," ",(0,i.jsx)("br",{}),"\r\nArgument flags."]}),"\n",(0,i.jsx)(n.h3,{id:"specifics",children:"Specifics"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Dictionary"})," ",(0,i.jsx)("br",{}),"\r\nSpecifics of the argument."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Learn more about specifics ",(0,i.jsx)(n.a,{href:"/docs/Arguments#existing-specifics",children:"here"})]})}),"\n",(0,i.jsx)(n.h2,{id:"existing-types",children:"Existing Types"}),"\n",(0,i.jsxs)(n.p,{children:["An argument can be multiple types at once. It can be ",(0,i.jsx)(n.code,{children:"number"})," and ",(0,i.jsx)(n.code,{children:"Object"}),", ",(0,i.jsx)(n.code,{children:"string"})," and ",(0,i.jsx)(n.code,{children:"Player"}),", etc."]}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsx)(n.p,{children:"Some of the arguments are not compatible with each other."})}),"\n",(0,i.jsx)(n.h3,{id:"player",children:"Player"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"Player | UserId"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PlayerOther"})," ",(0,i.jsx)("br",{}),"\r\nA Player instance will always be another player, not the command caller."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PlayerClient"})," ",(0,i.jsx)("br",{}),"\r\nIf the command has a client side, it will execute on the specified player's client."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PlayerOnline"})," ",(0,i.jsx)("br",{}),"\r\nThe Player will always be a ",(0,i.jsx)(n.code,{children:"Player"})," instance."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"PlayerOffline"})," ",(0,i.jsx)("br",{}),"\r\nThe Player will always be a ",(0,i.jsx)(n.code,{children:"UserId"})," number."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe Player could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"rank-1",children:"Rank"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"RankData"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"RankLower"})," ",(0,i.jsx)("br",{}),"\r\nThe rank needs to be lower than the command caller's rank."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"RanHigher"})," ",(0,i.jsx)("br",{}),"\r\nThe rank needs to be higher than the command caller's rank."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"RankEqual"})," ",(0,i.jsx)("br",{}),"\r\nThe rank needs to be equal to the command caller's rank."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe rank could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"string",children:"string"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"string"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"ToFilter"})," ",(0,i.jsx)("br",{}),"\r\nThe string will be filtered."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Infinite"})," ",(0,i.jsx)("br",{}),"\r\nThe string will be able to contain space characters."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe string could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"number",children:"number"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"number"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe number could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"boolean",children:"boolean"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"boolean"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe boolean could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"object",children:"Object"}),"\n",(0,i.jsxs)(n.p,{children:["Converts to: ",(0,i.jsx)(n.code,{children:"In-game Instance"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Compatible flags:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Infinite"})," ",(0,i.jsx)("br",{}),"\r\nFor a more precise search for objects that have space characters in their names."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optional"})," ",(0,i.jsx)("br",{}),"\r\nThe object could also be ",(0,i.jsx)(n.code,{children:"nil"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Specifics:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Multiple"})," ",(0,i.jsx)(n.code,{children:"boolean"})," ",(0,i.jsx)("br",{}),"\r\nReturns an array of objects that share similar names."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Services"})," ",(0,i.jsx)(n.code,{children:"StringArray | (Player: Player, Argument: string, Data: ArgumentData) -> {Service}"})," ",(0,i.jsx)("br",{}),"\r\nThe names of the services to search for objects in."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Classes"})," ",(0,i.jsx)(n.code,{children:"StringArray"})," ",(0,i.jsx)("br",{}),"\r\nWhat classes the objects need to be."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Properties"})," ",(0,i.jsx)(n.code,{children:"Dictionary"})," ",(0,i.jsx)("br",{}),"\r\nWhat properties need to be set in objects, and which ones need to be set? For example: ",(0,i.jsx)(n.code,{children:"{Transparency = 1}"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Blacklist"})," ",(0,i.jsx)(n.code,{children:"StringOrObjectArray"})," ",(0,i.jsx)("br",{}),"\r\nWhat objects need to be ignored?"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Whitelist"})," ",(0,i.jsx)(n.code,{children:"StringOrObjectArray"})," ",(0,i.jsx)("br",{}),"\r\nWhich objects should be considered and not ignored?"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tags"})," ",(0,i.jsx)(n.a,{href:"/docs/Arguments#objecttag",children:"ObjectTagArray"})," ",(0,i.jsx)("br",{}),"\r\nMiddleware for the objects list (sets auto-completion)."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"existing-specifics",children:"Existing Specifics"}),"\n",(0,i.jsx)(n.p,{children:"All the specifics for tweaking your argument to meet your needs."}),"\n",(0,i.jsx)(n.h3,{id:"autofill",children:"AutoFill"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"{function | StringArray}"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Sets auto-fill for your argument."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AutoFill = {\r\n\t{"aaa", "bbb", "aabb"}, -- Will automatically pick one of these based on what the user types. (Example: a -> aaa, aabb; b -> bbb)\r\n\tfunction(Command, Argument, Word) -- Straight up sets auto-fill to the constant one. (Example: a -> aaa, bbb, aabb; b -> aaa, bbb, aabb)\r\n\t\treturn {"aaa", "bbb", "aabb"}\r\n\tend,\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"autofilloverride",children:"AutoFillOverride"}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"boolean"})," ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.p,{children:"Override the existing autocompletion of the argument.Override the existing autocompletion of the argument."}),"\n",(0,i.jsx)(n.p,{children:"Example:"}),"\n",(0,i.jsx)(n.p,{children:"Override off."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AutoFillOverride = false,\r\nAutoFill = {\r\n\t{"aaa", "bbb", "aabb"},\r\n\tfunction(Command, Argument, Word)\r\n\t\treturn {"aaa", "bbb", "aabb"}\r\n\tend,\r\n}\r\n\r\n--[[\r\n\tInput: a\r\n\tOutput: aaa, aabb, aaa, bbb, aabb (From two autofills.)\r\n]]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Override on."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'AutoFillOverride = true,\r\nAutoFill = {\r\n\t{"aaa", "bbb", "aabb"},\r\n\tfunction(Command, Argument, Word)\r\n\t\treturn {"aaa", "bbb", "aabb"}\r\n\tend,\r\n}\r\n\r\n--[[\r\n\tInput: a\r\n\tOutput: aaa, bbb, aabb (From last autofill in the table.)\r\n]]\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsx)(n.p,{children:"If the last autofill did not return anything, autocompletion will be empty."})}),"\n",(0,i.jsx)(n.h2,{id:"objecttag",children:"ObjectTag"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Tags"})," specific for ",(0,i.jsx)(n.code,{children:"Object"})," type. With it, you can create your custom ",(0,i.jsx)(n.code,{children:"Specifics"})," for your argument. ",(0,i.jsx)("br",{})]}),"\n",(0,i.jsx)(n.h3,{id:"structure-1",children:"Structure"}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s the structure of the default object tag:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:"{\r\n\tAlias: StringArray,\r\n\tCall: (Objects: {Instance}, Specifics: {[key]: value}) -> {Instance}\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s an example of using an Object Tag:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-lua",children:'{\r\n\t{\r\n\t\tAlias = {"omega", "super"},\r\n\t\tCall = function(Objects, Specifics)\r\n\t\t\tif Specifics.OmegaBanned then\r\n\t\t\t\treturn {}\r\n\t\t\tend\r\n\r\n\t\t\treturn Objects\r\n\t\tend\r\n\t},\r\n\r\n\t{\r\n\t\tAlias = {"cool"},\r\n\t\tCall = function(Objects, Specifics)\r\n\t\t\treturn {workspace.Baseplate}\r\n\t\tend\r\n\t},\r\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
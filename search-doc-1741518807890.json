{"searchDocs":[{"title":"Popup","type":0,"sectionRef":"#","url":"/GAdminV2/api/Popup","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#types","content":" ","version":null,"tagName":"h2"},{"title":"CutPopupData​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#CutPopupData","content":"&lt;/&gt; interface CutPopupData { Type: &quot;Notice&quot; | &quot;Warning&quot; | &quot;Error&quot;-- The type of popup to create. Title: string-- The title of the popup. Text: string-- The text of the popup. Time: number-- The time the popup will be displayed for. Interaction: boolean-- If the popup is interactable. }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#properties","content":" ","version":null,"tagName":"h2"},{"title":"History​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#History","content":"&lt;/&gt; Popup.History: {CutPopupData} A table containing the history of last 100 popups. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#functions","content":" ","version":null,"tagName":"h2"},{"title":"New​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#New","content":"&lt;/&gt; Popup:New( Data: PopupData-- The data to create the popup with. ) → nil ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#Popup","content":"interface Popup { __type: string History: {CutPopupData} New: (Data: PopupData) → nil }  ","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Popup","url":"/GAdminV2/api/Popup#PopupData","content":"interface PopupData { Player: Player? -- The player to send the popup to. (If on server) Type: &quot;Notice&quot; | &quot;Warning&quot; | &quot;Error&quot;-- The type of popup to create. Title: string?-- The title of the popup. Text: string-- The text of the popup. Time: number?-- The time the popup will be displayed for. Interact: () → nil-- On interaction function. OnEnd: () → nil-- The function to run when the popup ends. }  Creates a new popup. ","version":null,"tagName":"h3"},{"title":"Addon Examples","type":0,"sectionRef":"#","url":"/GAdminV2/docs/AddonExamples","content":"Addon Examples construction This page is under construction. tip See Addons first. Download addon example here","keywords":"","version":"Next"},{"title":"Interface","type":0,"sectionRef":"#","url":"/GAdminV2/api/Interface","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#types","content":" ","version":null,"tagName":"h2"},{"title":"Interface​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Interface","content":"&lt;/&gt; interface Interface { __type: string UI: ScreenGui __Hovered: CurrentlyHovered __Tweens: InterfaceTweens PlaceData: table Popup: Popup Listeners: table Hovers: table Location: Location ScreenSize: Vector2 Icon: TopBarPlus Load: () → () Open: ( On: string?, FromIcon: boolean?, NoSound: boolean? ) → () Close: (FromIcon: boolean?) → () SetGuiCoreEnabled: ( Name: string, State: boolean ) → () OnLocationChange: (Function: (Location: Location) → ()) → () TriggerDataMethod: ( Place: string, Method: string, ...: any ) → unknown GetData: (Place: string?) → table GetFixedPosition: ( Frame: GuiObject , Position: UDim2 ) → UDim2 LoadHovering: () → () SetHover: ( Object: GuiObject , RawInfo: string | () → string ) → () SetHoverConfig: ( Object: GuiObject , Follow: (Object: GuiObject ) → UDim2 ) → () ConfigBlock: ( Button: GuiObject , CategoryName: string, Key: string ) → () Block: ( Button: GuiObject , RankLike: RankLike ) → () UnBlock: (Button: GuiObject ) → () Check: () → () SetLocation: ( Location: string, Page: number?, OpenOnClosed: boolean? ) → () Refresh: (Data: ArgumentiveLocation?) → () Reload: (Data: ArgumentiveLocation?) → () GetLocation: () → string GetPage: () → number SetPage: (Page: number) → () }   ","version":null,"tagName":"h3"},{"title":"CurrentlyHovered​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#CurrentlyHovered","content":"&lt;/&gt; interface CurrentlyHovered { Object: GuiObject -- The object that is currently hovered. Content: string-- The content of the hovered object. IsHovered: boolean-- Whether the object is hovered or not. }   ","version":null,"tagName":"h3"},{"title":"InterfaceTweens​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#InterfaceTweens","content":"&lt;/&gt; interface InterfaceTweens { Open: Tween -- Tween for opening the interface. Close: Tween -- Tween for closing the interface. }   ","version":null,"tagName":"h3"},{"title":"Location​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Location","content":"&lt;/&gt; interface Location { Place: string-- The current place. Data: table-- The data of the current place. Frame: GuiObject -- The frame of the current place. Back: table | (Location: Location) → ()-- The back function. Previous: table-- The previous location. Page: number-- The current page. MaxPages: number-- The maximum pages. }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#properties","content":" ","version":null,"tagName":"h2"},{"title":"UI​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#UI","content":"&lt;/&gt; Interface.UI: ScreenGui  ScreenGui of admin panel.  ","version":null,"tagName":"h3"},{"title":"PlaceData​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#PlaceData","content":"&lt;/&gt; Interface.PlaceData: table Data of all loaded places.  ","version":null,"tagName":"h3"},{"title":"Popup​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Popup","content":"&lt;/&gt; Interface.Popup: Popup   ","version":null,"tagName":"h3"},{"title":"Location​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Location","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Interface.Location: Location Current location of the interface that the user is on. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#functions","content":" ","version":null,"tagName":"h2"},{"title":"Open​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Open","content":"&lt;/&gt; Interface:Open( On: string?,-- The location to open the interface on. FromIcon: boolean?,-- Whether the interface is opened from the icon. NoSound: boolean?-- Whether to play the sound or not. ) → nil Opens the interface.  ","version":null,"tagName":"h3"},{"title":"Close​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Close","content":"&lt;/&gt; Interface:Close( FromIcon: boolean?-- Whether the interface is closed from the icon. ) → nil Closes the interface.  ","version":null,"tagName":"h3"},{"title":"SetGuiCoreEnabled​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#SetGuiCoreEnabled","content":"&lt;/&gt; Interface:SetGuiCoreEnabled( Name: string,-- The name of the CoreGui. State: boolean-- The state of the CoreGui. ) → nil Sets the state of specified CoreGui.  ","version":null,"tagName":"h3"},{"title":"OnLocationChange​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#OnLocationChange","content":"&lt;/&gt; Interface:OnLocationChange( Function: (Location: Location) → ()-- The function to set. ) → nil Sets the listener for when location changes.  ","version":null,"tagName":"h3"},{"title":"TriggerDataMethod​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#TriggerDataMethod","content":"&lt;/&gt; Interface:TriggerDataMethod( Place: string,-- The place to trigger the method. Method: string,-- The method to trigger. ...: TriggerData-- The arguments to pass. ) → unknown ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#TriggerData","content":"type TriggerData = any | &quot;ENUM.DEFAULT_ARGS&quot; | &quot;ENUM.PAGE_ARGS&quot;  Triggers a method of a UI Place. Interface:TriggerDataMethod(&quot;Main&quot;, &quot;RefreshHistory&quot;, &quot;ENUM.PAGE_ARGS&quot;, 2) Interface:TriggerDataMethod(&quot;Ranks&quot;, &quot;RefreshRanks&quot;, &quot;ENUM.DEFAULT_ARGS&quot;)   ","version":null,"tagName":"h3"},{"title":"GetData​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#GetData","content":"&lt;/&gt; Interface:GetData( Place: string?-- The place to get the data from. ) → table Returns data of given place.  ","version":null,"tagName":"h3"},{"title":"SetHover​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#SetHover","content":"&lt;/&gt; Interface:SetHover( Object: GuiObject ,-- The object to set the hover for. RawInfo: string | () → string-- The content of the hover. ) → nil Sets the hover for an object. Interface:SetHover(Button, &quot;Click to open the settings.&quot;)   ","version":null,"tagName":"h3"},{"title":"SetHoverConfig​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#SetHoverConfig","content":"&lt;/&gt; Interface:SetHoverConfig( Object: GuiObject ,-- The object to set the hover for. Follow: (Object: GuiObject ) → UDim2 -- The function to get current object's position from. ) → nil Sets the hover for an object. Interface:SetHoverConfig(Button, function(Object) return Object.Position end)   ","version":null,"tagName":"h3"},{"title":"ConfigBlock​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#ConfigBlock","content":"&lt;/&gt; Interface:ConfigBlock( Button: GuiObject ,-- The button to set the rank requirement for. CategoryName: string,-- The category name of the rank requirement. Key: string-- The key of the rank requirement. ) → nil Sets rank requirment from Restrictions module in the Settings instance to access GuiObject. Interface:ConfigBlock(Button, &quot;Main&quot;, &quot;Settings&quot;)   ","version":null,"tagName":"h3"},{"title":"Block​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Block","content":"&lt;/&gt; Interface:Block( Button: GuiObject ,-- The button to block. RankLike: RankLike-- The minimum rank to access button. ) → nil Blocks the button for the rank requirement. Same as ConfigBlock, but gives more freedom of a required rank. Interface:Block(Button, 4) Interface:Block(Button, &quot;Manager&quot;)   ","version":null,"tagName":"h3"},{"title":"UnBlock​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#UnBlock","content":"&lt;/&gt; Interface:UnBlock( Button: GuiObject -- The button to unblock. ) → nil Removes rank requirements from specified button.  ","version":null,"tagName":"h3"},{"title":"Refresh​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#Refresh","content":"&lt;/&gt; Interface:Refresh( Data: ArgumentiveLocation?-- The location to show. ) → nil ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#ArgumentiveLocation","content":"interface ArgumentiveLocation { Place: string?-- The place to show. Page: number?-- The page to show. MaxPages: number?-- The maximum pages to show. Arguments: any?-- The arguments to pass. }  Works the same as :SetLocation(), but for Places that have a :Set() method. Interface:Refresh({ Place = &quot;_Logs&quot;, Page = 1, MaxPages = 1, Arguments = { Type = &quot;Chat&quot; } })   ","version":null,"tagName":"h3"},{"title":"GetLocation​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#GetLocation","content":"&lt;/&gt; Interface:GetLocation() → string Returns the current Place the user is in.  ","version":null,"tagName":"h3"},{"title":"SetLocation​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#SetLocation","content":"&lt;/&gt; Interface:SetLocation( Location: string,-- The location to set. Page: number?,-- The page to set. OpenOnClosed: boolean?-- Open panel if it is closed. ) → nil Sets the current interface location to specified one.  ","version":null,"tagName":"h3"},{"title":"GetPage​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#GetPage","content":"&lt;/&gt; Interface:GetPage() → number Returns current page of the location.  ","version":null,"tagName":"h3"},{"title":"SetPage​","type":1,"pageTitle":"Interface","url":"/GAdminV2/api/Interface#SetPage","content":"&lt;/&gt; Interface:SetPage( Page: number-- The page to set. ) → nil Sets the page of the location. NOTE The page is limited to the maximum number of pages in the location. ","version":null,"tagName":"h3"},{"title":"Scheduler","type":0,"sectionRef":"#","url":"/GAdminV2/api/Scheduler","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#types","content":" ","version":null,"tagName":"h2"},{"title":"Scheduler​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Scheduler","content":"&lt;/&gt; interface Scheduler { Groups: IntervalGroup Load: () → nil AddGroup: (Name: string) → nil RemoveGroup: (Name: string) → nil Insert: ( Group: string, Id: number, Function: () → nil, Time: number ) → nil Remove: ( Group: string, Id: number ) → nil Find: ( Group: string, Id: number ) → Interval,number IsReady: ( Group: string, Id: number ) → boolean Call: ( Group: string, Id: number, Force: boolean ) → nil }   ","version":null,"tagName":"h3"},{"title":"IntervalGroup​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#IntervalGroup","content":"&lt;/&gt; type IntervalGroup = {[string]: {Interval}}  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#properties","content":" ","version":null,"tagName":"h2"},{"title":"Groups​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Groups","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Scheduler.Groups: IntervalGroup Currently running interval groups. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#functions","content":" ","version":null,"tagName":"h2"},{"title":"AddGroup​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#AddGroup","content":"&lt;/&gt; Scheduler:AddGroup( Name: string-- Unique name of the group. ) → nil Adds new interval group.  ","version":null,"tagName":"h3"},{"title":"RemoveGroup​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#RemoveGroup","content":"&lt;/&gt; Scheduler:RemoveGroup( Name: string-- Name of the group. ) → nil Removes interval group.  ","version":null,"tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Insert","content":"&lt;/&gt; Scheduler:Insert( Group: string,-- Name of the group. Id: number,-- Unique identifier of the interval. Function: () → nil,-- Function to run. Time: number-- Time interval. ) → nil Inserts new interval.  ","version":null,"tagName":"h3"},{"title":"Remove​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Remove","content":"&lt;/&gt; Scheduler:Remove( Group: string,-- Name of the group. Id: number-- Unique identifier of the interval. ) → nil Removes interval.  ","version":null,"tagName":"h3"},{"title":"Find​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Find","content":"&lt;/&gt; Scheduler:Find( Group: string,-- Name of the group. Id: number-- Unique identifier of the interval. ) → Interval,number ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Interval","content":"interface Interval { Id: number-- The unique identifier of the interval. Callback: thread-- The coroutine of the interval. Function: () → nil-- The function to run. Time: number-- The time interval. LastUpdate: number-- Last time the interval was updated. }  Finds interval.  ","version":null,"tagName":"h3"},{"title":"IsReady​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#IsReady","content":"&lt;/&gt; Scheduler:IsReady( Group: string,-- Name of the group. Id: number-- Unique identifier of the interval. ) → boolean Checks if interval is ready to be called.  ","version":null,"tagName":"h3"},{"title":"Call​","type":1,"pageTitle":"Scheduler","url":"/GAdminV2/api/Scheduler#Call","content":"&lt;/&gt; Scheduler:Call( Group: string,-- Name of the group. Id: number,-- Unique identifier of the interval. Force: boolean-- Forces the interval to run even if interval is on cooldown. ) → nil Calls interval. ","version":null,"tagName":"h3"},{"title":"Addons","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Addons","content":"","keywords":"","version":"Next"},{"title":"Universal addon structure​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#universal-addon-structure","content":" Every well-structured addon should follow this format:     Where:   The main addon folder name must follow this format: Addon Name@Addon Author.Must have a Config with Main module.Optional Assets folder for models and modules that your addon may require.  info The main addon folder must include the tag GAdmin Addon for your addon to load properly.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#configuration","content":" The configuration module must follow this format for the addon to work properly:  return { Enabled = true, -- Is addon enabled? Author = &quot;@gdr1461account2&quot;, -- Addon author Version = &quot;v1.0.0&quot;, -- Addon version Name = &quot;Test Addon&quot;, -- Name of the addon. Description = &quot;GAdmin addon.&quot;, -- Description of the addon. Tag = &quot;EXAMPLE&quot;, Parameters = { -- Addon parameters Commands = &quot;@this.Assets.Commands&quot;, Ranks = &quot;@this.Assets.Ranks&quot;, UI = &quot;@this.Assets.UI&quot;, ISettings = &quot;@this.Assets.ISettings&quot;, --Settings = &quot;@this.Assets.Settings&quot;, } }   Where:   Tag is an optional key that gets added as the prefix to author field.Parameters is table of GAdmin parameters that your addon uses.Description is detailed explanation of what your addon does.  ","version":"Next","tagName":"h2"},{"title":"Config Parameters​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#config-parameters","content":" There are many parameters you can use to enhance your addon’s functionality with the API.  Here’s how it works:  Parameters = { KEY = PATH }   Where:   KEY is parameter name that you want to use.PATH is the path to the object that the specified parameter will use. You can use any of the Roblox services or @this to reference the main addon folder as the starting point in the path.  Find more details about addon parameters here.  ","version":"Next","tagName":"h2"},{"title":"Main module​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#main-module","content":" The main module lets you run code whenever the GAdmin server or client boots up.  local Main = {} Main.Server = {} Main.Client = {} function Main.Server:Start() print(&quot;Server booted up!&quot;) print(self.Assets) print(self.Shared) print(self.Server) end function Main.Client:Start() print(&quot;Client booted up!&quot;) print(self.Assets) print(self.Shared) print(self.Client) end return Main   ","version":"Next","tagName":"h2"},{"title":"Server Access:​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#server-access","content":" Assets folder of your addon.Shared folder of GAdmin (GAdminV2.MainModule.Shared)Server folder of GAdmin (GAdminV2.MainModule.Server)  ","version":"Next","tagName":"h3"},{"title":"Client Access:​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#client-access","content":" Assets folder of your addon.Shared folder of GAdmin (GAdminV2.MainModule.Shared)Client folder of GAdmin (GAdminV2.MainModule.Client) ","version":"Next","tagName":"h3"},{"title":"Command","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Command","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#features","content":" GAdmin chat commands offer a flexible API that can be customized to your needs. You can set the required rank to use a command, define flexible arguments with custom autocompletion, and support both server and client execution — all within a single module.  ","version":"Next","tagName":"h2"},{"title":"Templates​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#templates","content":" info For a better understanding of how arguments work, see Command Arguments.  The standard structure of a GAdmin command follows a specific format:  local Command = {} Command.Name: string -- Unique name of custom command. Command.Alias: array -- Other names of your command. Needs to be unique too. Command.Description: string -- Description of your command. Command.Rank: string | number -- Rank required to use command. Command.Fluid: boolean --[[ Will API be able to send updates to the client for this commannd and will UpPeRcAsE matter when you call command in the chat. ]] Command.Arguments: array -- Arguments that you may need for your own command. Command.Server = {} -- Server side. Command.Client = {} -- Client side. --== &lt;&lt; Server &gt;&gt; -- Run command on the server. function Command.Server:Run(Caller, Arguments) ... end -- What services your command need on the server side. function Command.Server:Get(Services) ... end --== &lt;&lt; Client &gt;&gt; -- Run command on the client. function Command.Client:Run(Caller, Arguments) ... end -- What services your command need on the client side. function Command.Client:Get(Services) ... end return Command   Here's some examples of commands for you to reference:   ","version":"Next","tagName":"h2"},{"title":"Bring​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#bring","content":" local Command = {} Command.Name = &quot;Bring&quot; Command.Alias = {&quot;Br&quot;} Command.Description = &quot;Teleports player to you.&quot; Command.Rank = 2 Command.Fluid = true Command.Arguments = { { Name = &quot;Player&quot;, Types = {&quot;Player&quot;}, Rank = 2, Flags = {&quot;PlayerOnline&quot;}, Specifics = {}, }, } Command.Server = {} Command.Client = {} --== &lt;&lt; Server &gt;&gt; function Command.Server:Run(Caller, Arguments) local player = Arguments[1] local Position = Caller.Character:GetPivot() * CFrame.Angles(0, math.rad(180), 0) player.Character:PivotTo(Position) end return Command   ","version":"Next","tagName":"h3"},{"title":"Shutdown​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#shutdown","content":" local Command = {} Command.Name = &quot;Shutdown&quot; Command.Alias = {} Command.Description = &quot;Shutdowns current server with specified reason if any.&quot; Command.Rank = 4 Command.Fluid = true Command.Arguments = { { Name = &quot;Reason&quot;, Types = {&quot;string&quot;}, Rank = 3, Flags = {&quot;Optional&quot;, &quot;Infinite&quot;, &quot;ToFilter&quot;}, Specifics = {}, } } Command.Server = {} Command.Client = {} --== &lt;&lt; Server &gt;&gt; function Command.Server:Run(Caller, Arguments) local Reason = Arguments[1] or `By @{Caller.Name}` self.API:Shutdown(Reason) end function Command.Server:Get(Services) return { API = Services.API } end return Command   ","version":"Next","tagName":"h3"},{"title":"ChatLogs​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#chatlogs","content":" --== &lt;&lt; Services &gt;&gt; local Main = script:FindFirstAncestor(&quot;GAdminShared&quot;) local HumanoidProperty = require(Main.Shared.Services.Core.HumanoidProperty) local Properties = HumanoidProperty:GetList() local Property = &quot;&quot; --== local Command = {} Command.Name = &quot;ChatLogs&quot; Command.Alias = {&quot;CLogs&quot;} Command.Description = &quot;Shows chat logs.&quot; Command.Rank = 2 Command.Fluid = true Command.Arguments = { { Name = &quot;Player&quot;, Types = {&quot;Player&quot;}, Rank = 3, Flags = {&quot;Optional&quot;, &quot;PlayerOnline&quot;, &quot;PlayerClient&quot;}, Specifics = {}, }, } Command.Server = {} Command.Client = {} --== &lt;&lt; Client &gt;&gt; function Command.Client:Run(Caller, Arguments) _G.GAdmin.Framework.Interface:Refresh({ Place = &quot;_Logs&quot;, Page = 1, MaxPages = 1, Arguments = { Type = &quot;ChatLogs&quot;, }, }) end return Command   ","version":"Next","tagName":"h3"},{"title":"Countdown​","type":1,"pageTitle":"Command","url":"/GAdminV2/docs/Command#countdown","content":" local Command = {} Command.Name = &quot;Countdown&quot; Command.Alias = {&quot;Count&quot;, &quot;CD&quot;} Command.Description = &quot;Count downs time.&quot; Command.Rank = 2 Command.Fluid = true Command.Arguments = { { Name = &quot;Time&quot;, Types = {&quot;number&quot;}, Rank = 2, Flags = {}, Specifics = {}, }, } Command.Server = {} Command.Client = {} --== &lt;&lt; Server &gt;&gt; function Command.Server:Run(Caller, Arguments) local Time = math.clamp(Arguments[1], 1, 99) for i = Time, 1, -1 do self.Remote:FireAll(&quot;SysMessage&quot;, { Type = &quot;Center&quot;, From = `Server`, Message = i, Time = 1, SkipTween = i ~= Time, }) task.wait() end end function Command.Server:Get(Services) return { Remote = Services.Remote } end return Command  ","version":"Next","tagName":"h3"},{"title":"Command Arguments","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Arguments","content":"","keywords":"","version":"Next"},{"title":"Structure​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#structure","content":" To ensure your argument is well-structured, follow this template:  { Name: string, Types = {string}, Rank: number | string, Flags = {[key]: value}, Specifics = {[key]: value}, },   Now, let's go over the explanation of this structure.  ","version":"Next","tagName":"h2"},{"title":"Name​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#name","content":" Type: string The name of the argument displayed on the Command page. Skip this to use the first argument type as the default.  ","version":"Next","tagName":"h3"},{"title":"Types​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#types","content":" Type: StringArray Types used to convert the argument. For example, if your argument is a number type, it will convert the argument '3' to 3.  info Learn more about types here.  ","version":"Next","tagName":"h3"},{"title":"Rank​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#rank","content":" Type: number | string The rank required to use this argument.  ","version":"Next","tagName":"h3"},{"title":"Flags​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#flags","content":" Type: Dictionary Argument flags.  ","version":"Next","tagName":"h3"},{"title":"Specifics​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#specifics","content":" Type: Dictionary Specifics of the argument.  info Learn more about specifics here  ","version":"Next","tagName":"h3"},{"title":"Existing Types​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#existing-types","content":" An argument can be multiple types at once. It can be number and Object, string and Player, etc.  danger Some of the arguments are not compatible with each other.  ","version":"Next","tagName":"h2"},{"title":"Player​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#player","content":" Converts to: Player | UserId   Compatible flags:  PlayerOther A Player instance will always be another player, not the command caller. PlayerClient If the command has a client side, it will execute on the specified player's client. PlayerOnline The Player will always be a Player instance. PlayerOffline The Player will always be a UserId number. Optional The Player could also be nil.  ","version":"Next","tagName":"h3"},{"title":"Rank​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#rank-1","content":" Converts to: RankData   Compatible flags:  RankLower The rank needs to be lower than the command caller's rank. RanHigher The rank needs to be higher than the command caller's rank. RankEqual The rank needs to be equal to the command caller's rank. Optional The rank could also be nil.  ","version":"Next","tagName":"h3"},{"title":"string​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#string","content":" Converts to: string   Compatible flags:  ToFilter The string will be filtered. Infinite The string will be able to contain space characters. Optional The string could also be nil.  ","version":"Next","tagName":"h3"},{"title":"number​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#number","content":" Converts to: number   Compatible flags:  Optional The number could also be nil.  ","version":"Next","tagName":"h3"},{"title":"boolean​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#boolean","content":" Converts to: boolean   Compatible flags:  Optional The boolean could also be nil.  ","version":"Next","tagName":"h3"},{"title":"Object​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#object","content":" Converts to: In-game Instance   Compatible flags:  Infinite For a more precise search for objects that have space characters in their names. Optional The object could also be nil.  Specifics:  Multiple boolean Returns an array of objects that share similar names. Services StringArray | (Player: Player, Argument: string, Data: ArgumentData) -&gt; {Service} The names of the services to search for objects in. Classes StringArray What classes the objects need to be. Properties Dictionary What properties need to be set in objects, and which ones need to be set? For example: {Transparency = 1}. Blacklist StringOrObjectArray What objects need to be ignored? Whitelist StringOrObjectArray Which objects should be considered and not ignored? Tags ObjectTagArray Middleware for the objects list (sets auto-completion).  ","version":"Next","tagName":"h3"},{"title":"Existing Specifics​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#existing-specifics","content":" All the specifics for tweaking your argument to meet your needs.  ","version":"Next","tagName":"h2"},{"title":"AutoFill​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#autofill","content":" Type: {function | StringArray}   Sets auto-fill for your argument.  AutoFill = { {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;}, -- Will automatically pick one of these based on what the user types. (Example: a -&gt; aaa, aabb; b -&gt; bbb) function(Command, Argument, Word) -- Straight up sets auto-fill to the constant one. (Example: a -&gt; aaa, bbb, aabb; b -&gt; aaa, bbb, aabb) return {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;} end, }   ","version":"Next","tagName":"h3"},{"title":"AutoFillOverride​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#autofilloverride","content":" Type: boolean   Override the existing autocompletion of the argument.Override the existing autocompletion of the argument.  Example:  Override off.  AutoFillOverride = false, AutoFill = { {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;}, function(Command, Argument, Word) return {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;} end, } --[[ Input: a Output: aaa, aabb, aaa, bbb, aabb (From two autofills.) ]]   Override on.  AutoFillOverride = true, AutoFill = { {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;}, function(Command, Argument, Word) return {&quot;aaa&quot;, &quot;bbb&quot;, &quot;aabb&quot;} end, } --[[ Input: a Output: aaa, bbb, aabb (From last autofill in the table.) ]]   danger If the last autofill did not return anything, autocompletion will be empty.  ","version":"Next","tagName":"h3"},{"title":"ObjectTag​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#objecttag","content":" Tags specific for Object type. With it, you can create your custom Specifics for your argument.   ","version":"Next","tagName":"h2"},{"title":"Structure​","type":1,"pageTitle":"Command Arguments","url":"/GAdminV2/docs/Arguments#structure-1","content":" Here’s the structure of the default object tag:  { Alias: StringArray, Call: (Objects: {Instance}, Specifics: {[key]: value}) -&gt; {Instance} }   Here’s an example of using an Object Tag:  { { Alias = {&quot;omega&quot;, &quot;super&quot;}, Call = function(Objects, Specifics) if Specifics.OmegaBanned then return {} end return Objects end }, { Alias = {&quot;cool&quot;}, Call = function(Objects, Specifics) return {workspace.Baseplate} end }, }  ","version":"Next","tagName":"h3"},{"title":"Framework","type":0,"sectionRef":"#","url":"/GAdminV2/api/Framework","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#types","content":" ","version":null,"tagName":"h2"},{"title":"Framework​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Framework","content":"&lt;/&gt; interface Framework { __type: string Interface: Interface Cache: table UI: UI Display: table Draggable: table Chat: table Load: () → nil Trigger: (Data: PlaceTriggerData) → unknown Display: ( Name: string, ... ) → unknown }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#properties","content":" ","version":null,"tagName":"h2"},{"title":"Interface​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Interface","content":"&lt;/&gt; Framework.Interface: Interface   ","version":null,"tagName":"h3"},{"title":"Cache​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Cache","content":"&lt;/&gt; Framework.Cache: table Client cache.  ","version":null,"tagName":"h3"},{"title":"UI​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#UI","content":"&lt;/&gt; Framework.UI: UI   ","version":null,"tagName":"h3"},{"title":"Display​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Display","content":"&lt;/&gt; Framework.Display: table  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#functions","content":" ","version":null,"tagName":"h2"},{"title":"Trigger​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Trigger","content":"&lt;/&gt; Framework:Trigger(Data: PlaceTriggerData) → unknown ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#PlaceTriggerData","content":"interface PlaceTriggerData { Place: string-- Name of the UI Place Method: string-- Name of the method to trigger Arguments: {TriggerData}-- Arguments to pass to the method }  Triggers a method of an UI Place. Framework:TriggerDataMethod({ Place = &quot;Main&quot;, Method = &quot;RefreshRanks&quot;, Arguments = {&quot;ENUM.DEFAULT_ARGS&quot;} })   ","version":null,"tagName":"h3"},{"title":"Display​","type":1,"pageTitle":"Framework","url":"/GAdminV2/api/Framework#Display","content":"&lt;/&gt; Framework:Display( Name: string,,-- Name of the UI Object ...: any,-- Arguments ) → unknown Displays a UI Object. ","version":null,"tagName":"h3"},{"title":"Render","type":0,"sectionRef":"#","url":"/GAdminV2/api/Render","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Render","url":"/GAdminV2/api/Render#types","content":" ","version":null,"tagName":"h2"},{"title":"Render​","type":1,"pageTitle":"Render","url":"/GAdminV2/api/Render#Render","content":"&lt;/&gt; type Render = (Callback: (Delta: number) → nil) → {Disconnect: () → nil}  ","version":null,"tagName":"h3"},{"title":"_G","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Global","content":"","keywords":"","version":"Next"},{"title":"Server​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#server","content":" Global properties of GAdmin on the server side:  { API = ServerAPI, Modified = true, Module = MainModule, Path = MainModuleScript, Render: Render, Scheduler: Scheduler, __GetBanData: (RawBanData: table) -&gt; BanData }   ","version":"Next","tagName":"h2"},{"title":"API​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#api","content":" GAdmin's Server API.  ","version":"Next","tagName":"h3"},{"title":"Modified​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#modified","content":" A boolean indicating whether GAdmin has been modified by addons.  ","version":"Next","tagName":"h3"},{"title":"Module​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#module","content":" The required module from the path GAdminV2.MainModule.  ","version":"Next","tagName":"h3"},{"title":"Path​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#path","content":" A shortcut to the MainModule path for easier access to the Server folder (e.g., GAdminV2.MainModule).  ","version":"Next","tagName":"h3"},{"title":"Render​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#render","content":" GAdmin's Renderer  ","version":"Next","tagName":"h3"},{"title":"Scheduler​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#scheduler","content":" GAdmin's Scheduler  ","version":"Next","tagName":"h3"},{"title":"__GetBanData​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#__getbandata","content":" Used locally in the system to retrieve dictionary-based ban data from an array.  local BanData = _G.GAdmin.__GetBanData({ 00000, -- Moderator ID &quot;No reason.&quot;, -- Reason &quot;00000000&quot;, -- The time in Unix timestamp format, converted to a string. &quot;00000000&quot;, -- The Unix timestamp of when a user was banned. nil, -- Indicates whether a user has been banned locally (deprecated property). true, -- ApplyToUniverse – used for the Roblox Ban API. nil, -- The type of ban (Global/Server) (deprecated property).. &quot;No reason.&quot; -- ModHint. })   ","version":"Next","tagName":"h3"},{"title":"Client​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#client","content":" ","version":"Next","tagName":"h2"},{"title":"Path​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#path-1","content":" A shortcut to the GAdminShared path for easier access to the main folder (e.g., ReplicatedStorage.GAdminShared).  ","version":"Next","tagName":"h3"},{"title":"Render​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#render-1","content":" GAdmin's Renderer  ","version":"Next","tagName":"h3"},{"title":"__GetBanData​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#__getbandata-1","content":" Used locally in the system to retrieve dictionary-based ban data from an array.  local BanData = _G.GAdmin.__GetBanData({ 00000, -- Moderator ID &quot;No reason.&quot;, -- Reason &quot;00000000&quot;, -- The time in Unix timestamp format, converted to a string. &quot;00000000&quot;, -- The Unix timestamp of when a user was banned. nil, -- Indicates whether a user has been banned locally (deprecated property). true, -- ApplyToUniverse – used for the Roblox Ban API. nil, -- The type of ban (Global/Server) (deprecated property).. &quot;No reason.&quot; -- ModHint. })   ","version":"Next","tagName":"h3"},{"title":"Framework​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#framework","content":" GAdmin's Framework  ","version":"Next","tagName":"h3"},{"title":"Scheduler​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#scheduler-1","content":" GAdmin's Scheduler  ","version":"Next","tagName":"h3"},{"title":"UseTheme​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#usetheme","content":" Boolean that tells the system whether the theme should be applied to the UI panel when the Theme setting is changed.  ","version":"Next","tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"_G","url":"/GAdminV2/docs/Global#theme","content":" Theme Data ","version":"Next","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Installation","content":"Installation GAdminV2 doesn't require unpacking anything. Just insert GAdminV2.rbxm into ServerScriptService, and you're ready to go! Guide Download the latest version of GAdminV2 from GitHub. version It is recommended to download a release that doesn't have the pre-release tag. Place GAdminV2 inside ServerScriptService. Now, go to Game Settings located in the top bar, navigate to the Security category, and enable the following parameters: Enable Studio Access to API Services This is essential for GAdminV2's workflow. Without it, half of GAdmin's features will stop working. Allow Third-Party Sales This is required for the correct functionality of the About page in the admin panel. If you want to use the in-game server-side executor, follow the steps below: Select ServerScriptService inside the Explorer.Enable the LoadStringEnabled property inside it. info LoadStringEnabled is essential for the executor to work because it relies on that Roblox feature. danger Enabling the LoadStringEnabled property comes with potential downsides. Malicious code can now execute strings as code directly into your game using loadstring(). Be cautious with this setting.","keywords":"","version":"Next"},{"title":"Addon Parameters","type":0,"sectionRef":"#","url":"/GAdminV2/docs/AddonParameters","content":"","keywords":"","version":"Next"},{"title":"Settings​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#settings","content":" warning May conflict with other addons that use the same parameter.    Object: Configuration   Replaces the current Settings object inside GAdmin (GAdminV2.Settings) with custom ones.      ","version":"Next","tagName":"h2"},{"title":"ISettings​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#isettings","content":"   Object: ModuleScript   Adds custom settings that users can change in-game.    info Setting name must be unique from existing ones on the server.  local Settings = {} Settings.Server = {} Settings.Client = {} function Settings.Server:Load(Config) Config:Set(&quot;TestSetting&quot;, true) Config:Set(&quot;TestSlider&quot;, 0.5) Config:Set(&quot;TestText&quot;, &quot;Test&quot;) end function Settings.Client:Load(Config) Config:Set({ Name = &quot;TestSetting&quot;, Description = &quot;Test setting from the addon.&quot;, Type = &quot;Boolean&quot;, Default = true, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) Config:Set({ Name = &quot;TestSlider&quot;, Description = &quot;Test slider setting from the addon.&quot;, Type = &quot;Slider&quot;, Default = { Default = 0.5, Min = 0, Max = 1, Slide = .1, }, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) Config:Set({ Name = &quot;TestText&quot;, Description = &quot;Test text setting from the addon.&quot;, Type = &quot;Text&quot;, Default = &quot;Test&quot;, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) end return Settings   ","version":"Next","tagName":"h2"},{"title":"Commands​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#commands","content":"   Object: Folder   Loads custom commands from a specified folder.    See Command  ","version":"Next","tagName":"h2"},{"title":"Ranks​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#ranks","content":"   Object: ModuleScript   Adds custom ranks into the server with your addon locally.    return { { Name = &quot;TestRank!&quot;, -- Rank name. Rank = 2.2, -- Rank power (0-5) Color = Color3.new(0.662745, 0.705882, 1):ToHex(), -- Rank color. Players = {} -- Players that will have this rank by default. }, { Name = &quot;TestRank2&quot;, Rank = 0.2, Color = Color3.new(0.678431, 0.164706, 1):ToHex(), Players = {} }, }   ","version":"Next","tagName":"h2"},{"title":"UI​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#ui","content":"   Object: Folder   Loads your own pages into the GAdmin panel.    local UI = {} function UI:Load(player, Builder) for i, Place in ipairs(script:GetChildren()) do Builder:LoadPlace(Place, Place.Frame) end end return UI   Structure:    Where:  Place is the page handler containing the page itself.Frame is the page instance.  Place module:  --== &lt;&lt; Services &gt;&gt; local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Main = ReplicatedStorage.GAdminShared --== local Place = {} Place.Name = &quot;PLACENAME&quot; -- Unique name of the page. -- Previous location. Set to nil if you want user to be stuck on this place forever. Place.Previous = function(Location) return Location.Previous end Place.Page = 0 -- Will change to the current page that user is on. Place.MaxPages = 0 -- Will change to the number of pages for this place. -- Your own arguments. Can be anything. Place.Arguments = { } -- Fires one time when Interface has loaded in. function Place:Load(UI, Frame, Interface) end -- Gets called whenever direct Interface:Refresh() is called for this place or user changed the page of this place. function Place:Set(UI, Frame, Page, Arguments, Interface) end -- Gets called whenever page needs to be reloaded. function Place:Reload(Page, Interface) end return Place   Where:  UI is ScreenGui of admin panel.Frame is frame of your place.Interface is GAdmin Interface.Page is page frame of your place that user is currently on.Arguments is arguments that gets passed on in Interface:Refresh(). ","version":"Next","tagName":"h2"},{"title":"Start to use GAdmin in your game","type":0,"sectionRef":"#","url":"/GAdminV2/docs/intro","content":"Start to use GAdmin in your game You may find links below useful: Install GAdminV2: How to installMigrate to GAdminV2: Migrate from other admin panelsGAdmin API: APIHow to set up your own addon: Addons GuideCustom addon examples: Addon Examples","keywords":"","version":"Next"},{"title":"Migration","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Migrate","content":"construction This page is under construction. Migration Have you previously used HDAdmin, Commander, Exe, or Adonis admin systems and now want to switch to GAdminV2 without modifying any of your previous settings for these systems? Fear not, ...","keywords":"","version":"Next"},{"title":"PlayerAPI","type":0,"sectionRef":"#","url":"/GAdminV2/api/PlayerAPI","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#types","content":" ","version":null,"tagName":"h2"},{"title":"PlayerAPI​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#PlayerAPI","content":"&lt;/&gt; interface PlayerAPI { __type: string Players: {[number]: PlayerData} API: ServerAPI __RankPrompt: ( Player: Player , Rank: RankLike ) → nil __BanPrompt: ( Player: Player , BanData: BanOptions ) → nil Load: (API: ServerAPI) → nil GetUserId: (PlayerLike: UserLike) → number GetData: (PlayerLike: UserLike) → PlayerData SetData: ( PlayerLike: UserLike, Key: string, Value: any ) → boolean? OnMessage: ( player: Player , Message: string, Options: OnMessageOptions ) → PlayerData Bind: (player: Player ) → nil UnBind: (player: Player ) → nil }   ","version":null,"tagName":"h3"},{"title":"PlayerData​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#PlayerData","content":"&lt;/&gt; interface PlayerData { Data: {[string]: any}-- Session player data. Session: {[string]: any}-- Savable player session data. }   ","version":null,"tagName":"h3"},{"title":"UserLike​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#UserLike","content":"&lt;/&gt; type UserLike = number | string | Player   ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#properties","content":" ","version":null,"tagName":"h2"},{"title":"Players​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#Players","content":"&lt;/&gt; PlayerAPI.Players: {[number]: PlayerData} Player datas. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#functions","content":" ","version":null,"tagName":"h2"},{"title":"GetUserId​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#GetUserId","content":"&lt;/&gt; PlayerAPI:GetUserId(PlayerLike: UserLike) → number Gets UserId from player-like variable.  ","version":null,"tagName":"h3"},{"title":"GetData​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#GetData","content":"&lt;/&gt; PlayerAPI:GetData(PlayerLike: UserLike) → PlayerData Gets player's session data.  ","version":null,"tagName":"h3"},{"title":"SetData​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#SetData","content":"&lt;/&gt; PlayerAPI:SetData( PlayerLike: UserLike, Key: string, Value: any ) → boolean? Sets player's session data.  ","version":null,"tagName":"h3"},{"title":"OnMessage​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#OnMessage","content":"&lt;/&gt; PlayerAPI:OnMessage( player: Player , Message: string, Options: OnMessageOptions ) → PlayerData ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"PlayerAPI","url":"/GAdminV2/api/PlayerAPI#OnMessageOptions","content":"interface OnMessageOptions { NoLimit: boolean-- Disables command limit. NoLog: boolean-- Disables logging. }  Logs and executes commands from the specified message. ","version":null,"tagName":"h3"},{"title":"MainModule","type":0,"sectionRef":"#","url":"/GAdminV2/api/MainModule","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"MainModule","url":"/GAdminV2/api/MainModule#types","content":" ","version":null,"tagName":"h2"},{"title":"MainModule​","type":1,"pageTitle":"MainModule","url":"/GAdminV2/api/MainModule#MainModule","content":"&lt;/&gt; interface MainModule { __type: string __version: string Loaded: boolean IsServer: boolean Load: () → nil Replace: () → nil Settings: () → boolean }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"MainModule","url":"/GAdminV2/api/MainModule#properties","content":" ","version":null,"tagName":"h2"},{"title":"__version​","type":1,"pageTitle":"MainModule","url":"/GAdminV2/api/MainModule#__version","content":"&lt;/&gt; MainModule.__version: string The current version of GAdminV2 in use.  ","version":null,"tagName":"h3"},{"title":"Loaded​","type":1,"pageTitle":"MainModule","url":"/GAdminV2/api/MainModule#Loaded","content":"&lt;/&gt; MainModule.Loaded: boolean Indicates whether GAdminV2 has been loaded. ","version":null,"tagName":"h3"},{"title":"UI","type":0,"sectionRef":"#","url":"/GAdminV2/api/UI","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#types","content":" ","version":null,"tagName":"h2"},{"title":"UI​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#UI","content":"&lt;/&gt; interface UI { __type: string Popups: number Gui: ScreenGui __Loadings: {LoadingTable} Whitelist: {string} __ThemeMemory: {[GuiObject ]: Color3 } __ThemeActive: boolean __ThemeConnections: {RBXScriptConnection } Theme: Theme RenderStepped: RBXScriptConnection __CheckLoadings: () → nil __SetTheme: (Object: GuiObject ) → nil RefreshTheme: () → nil GetTheme: (Color: Color3 ) → Color3 SetTheme: ( Hue: number, Saturation: number, Value: number ) → nil ClearTheme: () → nil IsLoading: (Frame: Frame ) → boolean GetLoading: (Frame: Frame ) → number,LoadingTable CreatePlayer: ( Template: Frame , UserId: number, Format: string ) → Frame SetLoading: ( Frame: Frame , Check: () → boolean, Options: table ) → nil BreakLoading: (Frame: Frame ) → nil }   ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#Theme","content":"&lt;/&gt; interface Theme { Hue: number Saturation: number Value: number }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#properties","content":" ","version":null,"tagName":"h2"},{"title":"Popups​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#Popups","content":"&lt;/&gt; UI.Popups: number Amount of popups user got.  ","version":null,"tagName":"h3"},{"title":"Gui​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#Gui","content":"&lt;/&gt; UI.Gui: ScreenGui  Main ScreenGui of the panel.  ","version":null,"tagName":"h3"},{"title":"Whitelist​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#Whitelist","content":"&lt;/&gt; UI.Whitelist: {string} Whitelist of UI objects to theme.  ","version":null,"tagName":"h3"},{"title":"Theme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#Theme","content":"&lt;/&gt; UI.Theme: Theme Current theme of the UI. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#functions","content":" ","version":null,"tagName":"h2"},{"title":"RefreshTheme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#RefreshTheme","content":"&lt;/&gt; UI:RefreshTheme() → nil Refresh theme of the UI.  ","version":null,"tagName":"h3"},{"title":"GetTheme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#GetTheme","content":"&lt;/&gt; UI:GetTheme( Color: Color3 -- The color to get theme of. ) → Color3  Get theme of the UI.  ","version":null,"tagName":"h3"},{"title":"SetTheme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#SetTheme","content":"&lt;/&gt; UI:SetTheme( Hue: number,-- The hue of the theme. Saturation: number,-- The saturation of the theme. Value: number-- The value of the theme. ) → nil Set theme of the UI.  ","version":null,"tagName":"h3"},{"title":"ClearTheme​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#ClearTheme","content":"&lt;/&gt; UI:ClearTheme() → nil Clear theme of the UI.  ","version":null,"tagName":"h3"},{"title":"IsLoading​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#IsLoading","content":"&lt;/&gt; UI:IsLoading( Frame: Frame -- The frame to check. ) → boolean Check if the frame is loading.  ","version":null,"tagName":"h3"},{"title":"GetLoading​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#GetLoading","content":"&lt;/&gt; UI:GetLoading( Frame: Frame -- The frame to get loading of. ) → number,LoadingTable ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#LoadingTable","content":"interface LoadingTable { Frame: Frame -- The frame to load. Loading: Frame -- The loading frame. Tween: Tween -- The tween of the loading. Check: () → boolean-- The check to run. }  Get loading of the frame.  ","version":null,"tagName":"h3"},{"title":"CreatePlayer​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#CreatePlayer","content":"&lt;/&gt; UI:CreatePlayer( Template: Frame ,-- The template to create the player frame from. UserId: number,-- The user id of the player. Format: string-- The format of the username. ) → Frame  Create a new player frame from template.  ","version":null,"tagName":"h3"},{"title":"SetLoading​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#SetLoading","content":"&lt;/&gt; UI:SetLoading( Frame: Frame ,-- The frame to set loading of. Check: () → boolean,-- The check to run. If true, will remove the loading. Options: table-- The options to set. ) → nil Set loading of the frame.  ","version":null,"tagName":"h3"},{"title":"BreakLoading​","type":1,"pageTitle":"UI","url":"/GAdminV2/api/UI#BreakLoading","content":"&lt;/&gt; UI:BreakLoading( Frame: Frame -- The frame to break loading of. ) → nil Break loading of the frame. ","version":null,"tagName":"h3"},{"title":"RankService","type":0,"sectionRef":"#","url":"/GAdminV2/api/RankService","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#types","content":" ","version":null,"tagName":"h2"},{"title":"RankService​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RankService","content":"&lt;/&gt; interface RankService { __type: string RecentPlayers: {[number]: PlayerData} Temporary: {RankData} Save: () → boolean Reload: () → {RankData} BatchAdd: ( Data: {RankData}, Locally: boolean ) → nil Add: ( Data: RankData, Locally: boolean ) → nil Change: ( RankLike: RankLike, Data: RankData, Locally: boolean ) → nil Remove: ( RankLike: RankLike, Locally: boolean ) → nil AddUsers: ( Rank: RankLike, UserIds: {number}, Locally: boolean ) → nil RemoveUsers: ( Rank: RankLike, UserIds: {number}, Locally: boolean ) → nil SetUser: ( Rank: RankLike, UserId: number, Locally: boolean ) → nil AddUser: ( Rank: RankLike, UserId: number, Locally: boolean ) → nil RemoveUser: ( UserId: number, Locally: boolean ) → nil FindUser: (UserId: number) → RankData HasRank: ( Rank: RankLike, UserId: number ) → boolean GetUsers: ( Rank: RankLike, Type: &quot;All&quot; | &quot;Server&quot; | &quot;Global&quot; ) → {number} GetArray: ( Rank: RankLike, UserId: number ) → {string} IsInternal: (UserId: number) → boolean IsEquals: ( RankData: RankData, SourceData: RankData ) → boolean Find: ( RankLike: RankLike, FromCloned: boolean, NoCopy: boolean, FromTemporary: boolean ) → RankData,number }   ","version":null,"tagName":"h3"},{"title":"RankData​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RankData","content":"&lt;/&gt; interface RankData { Name: string Rank: number Players: {number | string} MadeBy: string? Temporary: boolean? }   ","version":null,"tagName":"h3"},{"title":"RankLike​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RankLike","content":"&lt;/&gt; type RankLike = number | string  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#properties","content":" ","version":null,"tagName":"h2"},{"title":"RecentPlayers​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RecentPlayers","content":"&lt;/&gt; RankService.RecentPlayers: {[number]: PlayerData} Recented cached player datas.  ","version":null,"tagName":"h3"},{"title":"Temporary​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#Temporary","content":"&lt;/&gt; RankService.Temporary: {RankData} Temporary rank data. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#functions","content":" ","version":null,"tagName":"h2"},{"title":"BatchAdd​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#BatchAdd","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:BatchAdd( Data: {RankData},-- Ranks to add. Locally: boolean-- If the ranks should be added locally. ) → nil Adds new ranks at once to the rank data.  ","version":null,"tagName":"h3"},{"title":"Add​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#Add","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:Add( Data: RankData,-- Rank to add. Locally: boolean-- If the rank should be added locally. ) → nil Adds new rank to the rank data.  ","version":null,"tagName":"h3"},{"title":"Change​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#Change","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:Change( RankLike: RankLike,-- Rank to change. Data: RankData,-- New rank data. Locally: boolean-- If the rank should be changed locally. ) → nil Changes rank data.  ","version":null,"tagName":"h3"},{"title":"Remove​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#Remove","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:Remove( RankLike: RankLike,-- Rank to remove. Locally: boolean-- If the rank should be removed locally. ) → nil Removes rank from the rank data.  ","version":null,"tagName":"h3"},{"title":"AddUsers​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#AddUsers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:AddUsers( Rank: RankLike,-- Rank to add users to. UserIds: {number},-- Users to add. Locally: boolean-- If the users should be added locally. ) → nil Adds users to the rank.  ","version":null,"tagName":"h3"},{"title":"RemoveUsers​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RemoveUsers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:RemoveUsers( Rank: RankLike,-- Rank to remove users from. UserIds: {number},-- Users to remove. Locally: boolean-- If the users should be removed locally. ) → nil Removes users from the rank.  ","version":null,"tagName":"h3"},{"title":"SetUser​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#SetUser","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:SetUser( Rank: RankLike,-- Rank to set user to. UserId: number,-- User to set. Locally: boolean-- If the user should be set locally. ) → nil Sets user to the rank.  ","version":null,"tagName":"h3"},{"title":"AddUser​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#AddUser","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:AddUser( Rank: RankLike,-- Rank to add user to. UserId: number,-- User to add. Locally: boolean-- If the user should be added locally. ) → nil Adds user to the rank.  ","version":null,"tagName":"h3"},{"title":"RemoveUser​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#RemoveUser","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:RemoveUser( UserId: number,-- User to remove. Locally: boolean-- If the user should be removed locally. ) → nil Removes user from the rank.  ","version":null,"tagName":"h3"},{"title":"FindUser​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#FindUser","content":"&lt;/&gt; RankService:FindUser( UserId: number-- User to find. ) → RankData Finds user rank.  ","version":null,"tagName":"h3"},{"title":"HasRank​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#HasRank","content":"&lt;/&gt; RankService:HasRank( Rank: RankLike,-- Rank to check for. UserId: number-- User to check. ) → boolean Checks if user has rank.  ","version":null,"tagName":"h3"},{"title":"GetUsers​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#GetUsers","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; RankService:GetUsers( Rank: RankLike,-- Rank to get users from. Type: &quot;All&quot; | &quot;Server&quot; | &quot;Global&quot;-- Type of users to get. ) → {number} Returns array table of users in the rank.  ","version":null,"tagName":"h3"},{"title":"GetArray​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#GetArray","content":"&lt;/&gt; RankService:GetArray( Rank: RankLike,-- Rank to get array from. UserId: number-- Unused argument. Can be skipped. ) → {string} Returns array table of ranks.  ","version":null,"tagName":"h3"},{"title":"IsEquals​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#IsEquals","content":"&lt;/&gt; RankService:IsEquals( RankData: RankData,-- Rank data to check. SourceData: RankData-- Source data to check. ) → boolean Checks if rank data is equals to source data.  ","version":null,"tagName":"h3"},{"title":"Find​","type":1,"pageTitle":"RankService","url":"/GAdminV2/api/RankService#Find","content":"&lt;/&gt; RankService:Find( RankLike: RankLike,-- Rank to find. FromCloned: boolean,-- If the rannk data should be returned from constant rank table. NoCopy: boolean,-- If the rank data should be returned as a reference and not a copy. FromTemporary: boolean-- If the rank data should be returned from temporary rank table. ) → RankData,number Finds rank data. ","version":null,"tagName":"h3"},{"title":"ServerAPI","type":0,"sectionRef":"#","url":"/GAdminV2/api/ServerAPI","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#types","content":" ","version":null,"tagName":"h2"},{"title":"ServerAPI​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#ServerAPI","content":"&lt;/&gt; interface ServerAPI { __type: string __Messages: table PlayerAPI: PlayerAPI RankService: RankService __EncryptMessageEnum: ( Topic: string, Item: unknown ) → unknown, __DecryptMessageEnum: ( Topic: string, Id: unknown ) → unknown, SetMessage: ( Topic: string, Enums: table ) → nil, ReceiveMessage: ( Topic: string, Function: (Data: MessageData) → () ) → nil, SendMessage: ( Topic: string, Data: table ) → boolean, GetOwnerId: () → number, Shutdown: (Reason: string) → nil, Ban: ( UserLike: UserLike, Options: BanOptions ) → boolean, UnBan: ( UserLike: UserLike, Type: string ) → boolean, GetBanData: ( UserLike: UserLike, Type: string ) → BanData, IsBanned: ( UserLike: UserLike, Type: string ) → boolean, GetBanlist: (Type: string) → table, GetPrefix: (player: UserLike) → string, SetPrefix: ( player: UserLike, Prefix: string ) → nil, GetRank: (player: UserLike) → RankData, SetRank: ( player: UserLike, Rank: RankLike, Server: boolean ) → nil }  ","version":null,"tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#properties","content":" ","version":null,"tagName":"h2"},{"title":"PlayerAPI​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#PlayerAPI","content":"&lt;/&gt; ServerAPI.PlayerAPI: PlayerAPI   ","version":null,"tagName":"h3"},{"title":"RankService​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#RankService","content":"&lt;/&gt; ServerAPI.RankService: RankService  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#functions","content":" ","version":null,"tagName":"h2"},{"title":"SetMessage​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#SetMessage","content":"&lt;/&gt; ServerAPI:SetMessage( Topic: string,-- Topic to send thru MessagingService Enums: table-- Compress strings mentioned in Enums to numbers for memory saving. ) → nil Sets enums for specific topic of MessaginService.  ","version":null,"tagName":"h3"},{"title":"ReceiveMessage​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#ReceiveMessage","content":"&lt;/&gt; ServerAPI:ReceiveMessage( Topic: string,-- Topic to send thru MessagingService Function: (Data: MessageData) → ()-- Function to execute when message is received. ) → nil ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#MessageData","content":"type MessageData = table  Listens for messages sent thru MessagingService. Takes up one Message Subscription slot.  ","version":null,"tagName":"h3"},{"title":"SendMessage​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#SendMessage","content":"&lt;/&gt; ServerAPI:SendMessage( Topic: string,-- Topic to send thru MessagingService Data: table-- Data to send thru MessagingService ) → boolean Sends message using MessagingService.  ","version":null,"tagName":"h3"},{"title":"GetOwnerId​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#GetOwnerId","content":"&lt;/&gt; ServerAPI:GetOwnerId() → number Returns owner id of the game.  ","version":null,"tagName":"h3"},{"title":"Shutdown​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#Shutdown","content":"&lt;/&gt; ServerAPI:Shutdown( Reason: string-- Reason for shutdown. ) → nil Shutdown current server.  ","version":null,"tagName":"h3"},{"title":"Ban​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#Ban","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:Ban( UserLike: UserLike,-- User to ban. Options: BanOptions-- Ban options. ) → boolean ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#BanOptions","content":"interface BanOptions { Reason: string-- Ban reason. PrivateReason: string-- Private ban reason. Time: number | &quot;inf&quot;-- Ban time. Moderator: number-- Moderator id. API: boolean-- Use Roblox ban API. Locally: boolean-- Ban locally. ApplyToUniverse: boolean-- Apply to universe. ExcludeAltAccount: boolean-- Exclude alt account. }  Bans specified player. To API ban player, you need to do the following: API:Ban(1556153247, { Reason = &quot;Bully&quot;, PrivateReason = &quot;Don't unban.&quot;, Time = &quot;inf&quot;, Moderator = 549319173, API = true, ApplyToUniverse = true, ExcludeAltAccount = true })   ","version":null,"tagName":"h3"},{"title":"UnBan​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#UnBan","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:UnBan( UserLike: UserLike,-- User to unban. Type: &quot;Global&quot; | &quot;Server&quot;-- Type of unban. ) → boolean Unbans specified player.  ","version":null,"tagName":"h3"},{"title":"GetBanData​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#GetBanData","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:GetBanData( UserLike: UserLike,-- User to get ban data from. Type: &quot;Global&quot; | &quot;Server&quot;-- Type of unban. ) → BanData ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#BanData","content":"interface BanData { Moderator: string-- Moderator id. Reason: string-- Ban reason. Time: string-- Ban time. On: string-- When did user get banned. API: boolean-- Use Roblox ban API. Locally: boolean-- Ban user on server. ApplyToUniverse: boolean-- Ban user in every place of the game. Type: string-- Ban type. PrivateReason: string-- For moderators only. }  Returns ban data of specified player.  ","version":null,"tagName":"h3"},{"title":"IsBanned​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#IsBanned","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:IsBanned( UserLike: UserLike,-- User to check if banned. Type: &quot;Global&quot; | &quot;Server&quot;-- Type of unban. ) → boolean Returns if specified player is banned.  ","version":null,"tagName":"h3"},{"title":"GetBanlist​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#GetBanlist","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:GetBanlist( Type: &quot;Global&quot; | &quot;Server&quot; | &quot;Both&quot; | &quot;Formatted&quot;-- Type of banlist. ) → table Returns banlist.  ","version":null,"tagName":"h3"},{"title":"GetPrefix​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#GetPrefix","content":"&lt;/&gt; ServerAPI:GetPrefix( player: UserLike-- Player to get prefix from. ) → string Returns player's prefix.  ","version":null,"tagName":"h3"},{"title":"SetPrefix​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#SetPrefix","content":"&lt;/&gt; ServerAPI:SetPrefix( player: UserLike,-- Player to set prefix for. Prefix: string-- New prefix. ) → nil Sets new prefix for given player.  ","version":null,"tagName":"h3"},{"title":"GetRank​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#GetRank","content":"&lt;/&gt; ServerAPI:GetRank( player: UserLike-- Player to get rank from. ) → RankData Returns player's rank.  ","version":null,"tagName":"h3"},{"title":"SetRank​","type":1,"pageTitle":"ServerAPI","url":"/GAdminV2/api/ServerAPI#SetRank","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerAPI:SetRank( player: UserLike,-- Player to set rank for. Rank: RankLike,-- New rank. Server: boolean-- Set rank for current server only. ) → nil Sets new rank for given player. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}
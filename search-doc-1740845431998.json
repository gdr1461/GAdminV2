{"searchDocs":[{"title":"Start to use GAdmin in your game","type":0,"sectionRef":"#","url":"/GAdminV2/docs/intro","content":"Start to use GAdmin in your game You may find links below useful: Install GAdminV2: How to installMigrate to GAdminV2: Migrate from other admin panelsGAdmin API: APIHow to set up your own addon: Addons GuideCustom addon examples: Addon Examples","keywords":"","version":"Next"},{"title":"Addon Examples","type":0,"sectionRef":"#","url":"/GAdminV2/docs/AddonExamples","content":"Addon Examples warning This page is under construction. tip See Addons first. Download addon example here","keywords":"","version":"Next"},{"title":"Migration","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Migrate","content":"warning This page is under construction. Migration Have you previously used HDAdmin, Commander, Exe, or Adonis admin systems and now want to switch to GAdminV2 without modifying any of your previous settings for these systems? Fear not, ...","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Installation","content":"Installation GAdminV2 doesn't require unpacking anything. Just insert GAdminV2.rbxm into ServerScriptService, and you're ready to go! Guide Download the latest version of GAdminV2 from GitHub. warning It is recommended to download a release that doesn't have the pre-release tag. Place GAdminV2 inside ServerScriptService. Now, go to Game Settings located in the top bar, navigate to the Security category, and enable the following parameters: Enable Studio Access to API Services This is essential for GAdminV2's workflow. Without it, half of GAdmin's features will stop working. Allow Third-Party Sales This is required for the correct functionality of the About page in the admin panel. If you want to use the in-game server-side executor, follow the steps below: Select ServerScriptService inside the Explorer.Enable the LoadStringEnabled property inside it. info LoadStringEnabled is essential for the executor to work because it relies on that Roblox feature. warning Enabling the LoadStringEnabled property comes with potential downsides. Malicious code can now execute strings as code directly into your game using loadstring(). Be cautious with this setting.","keywords":"","version":"Next"},{"title":"Command","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Command","content":"Command warning This page is under construction. Commands are essensial for GAdmin workflow. Example: local Command = {} Command.Name = &quot;Bring&quot; Command.Alias = {&quot;Br&quot;} Command.Description = &quot;Teleports player to you.&quot; Command.Rank = 2 Command.Fluid = true Command.Arguments = { { Name = &quot;Player&quot;, Types = {&quot;Player&quot;}, Rank = 2, Flags = {&quot;PlayerOnline&quot;}, Specifics = {}, }, } Command.Server = {} Command.Client = {} --== &lt;&lt; Server &gt;&gt; function Command.Server:Run(Caller, Arguments) local player = Arguments[1] local Position = Caller.Character:GetPivot() * CFrame.Angles(0, math.rad(180), 0) player.Character:PivotTo(Position) end return Command ","keywords":"","version":"Next"},{"title":"Addons","type":0,"sectionRef":"#","url":"/GAdminV2/docs/Addons","content":"","keywords":"","version":"Next"},{"title":"Universal addon structure​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#universal-addon-structure","content":" Every well-structured addon should follow this format:     Where:   The main addon folder name must follow this format: Addon Name@Addon Author.Must have a Config with Main modules.Optional Assets folder for models and modules that your addon may require.  info The main addon folder must include the tag GAdmin Addon for your add-on to load properly.  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#configuration","content":" The configuration module must follow this format for the addon to work properly:  return { Enabled = true, -- Is addon enabled? Author = &quot;@gdr1461account2&quot;, -- Addon author Version = &quot;v1.0.0&quot;, -- Addon version Name = &quot;Test Addon&quot;, -- Name of the addon. Description = &quot;GAdmin addon.&quot;, -- Description of the addon. Tag = &quot;EXAMPLE&quot;, Parameters = { -- Addon parameters Commands = &quot;@this.Assets.Commands&quot;, Ranks = &quot;@this.Assets.Ranks&quot;, UI = &quot;@this.Assets.UI&quot;, ISettings = &quot;@this.Assets.ISettings&quot;, --Settings = &quot;@this.Assets.Settings&quot;, } }   Where:   Tag is an optional key that gets added as the prefix to author field.Parameters is table of GAdmin parameters that your addon uses.Description is detailed explanation of what your addon does.  ","version":"Next","tagName":"h2"},{"title":"Config Parameters​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#config-parameters","content":" There are many parameters you can use to enhance your addon’s functionality with the API.  Here’s how it works:  Parameters = { KEY = PATH }   Where:   KEY is parameter name that you want to use.PATH is the path to the object that the specified parameter will use. You can use any of the Roblox services or @this to reference the main addon folder as the starting point in the path.  Find more details about addon parameters here.  ","version":"Next","tagName":"h2"},{"title":"Main module​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#main-module","content":" The main module lets you run code whenever the GAdmin server or client boots up.  local Main = {} Main.Server = {} Main.Client = {} function Main.Server:Start() print(&quot;Server booted up!&quot;) print(self.Assets) print(self.Shared) print(self.Server) end function Main.Client:Start() print(&quot;Client booted up!&quot;) print(self.Assets) print(self.Shared) print(self.Client) end return Main   ","version":"Next","tagName":"h2"},{"title":"Server Access:​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#server-access","content":" Assets folder of your addon.Shared folder of GAdmin (GAdminV2.MainModule.Shared)Server folder of GAdmin (GAdminV2.MainModule.Server)  ","version":"Next","tagName":"h3"},{"title":"Client Access:​","type":1,"pageTitle":"Addons","url":"/GAdminV2/docs/Addons#client-access","content":" Assets folder of your addon.Shared folder of GAdmin (GAdminV2.MainModule.Shared)Client folder of GAdmin (GAdminV2.MainModule.Client) ","version":"Next","tagName":"h3"},{"title":"Addon Parameters","type":0,"sectionRef":"#","url":"/GAdminV2/docs/AddonParameters","content":"","keywords":"","version":"Next"},{"title":"Settings​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#settings","content":" warning May conflict with other addons that use the same parameter.    Object: Configuration   Replaces the current Settings object inside GAdmin (GAdminV2.Settings) with custom ones.    ","version":"Next","tagName":"h2"},{"title":"ISettings​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#isettings","content":"   Object: ModuleScript   Adds custom settings that users can change in-game.  local Settings = {} Settings.Server = {} Settings.Client = {} function Settings.Server:Load(Config) Config:Set(&quot;TestSetting&quot;, true) Config:Set(&quot;TestSlider&quot;, 0.5) Config:Set(&quot;TestText&quot;, &quot;Test&quot;) end function Settings.Client:Load(Config) Config:Set({ Name = &quot;TestSetting&quot;, Description = &quot;Test setting from the addon.&quot;, Type = &quot;Boolean&quot;, Default = true, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) Config:Set({ Name = &quot;TestSlider&quot;, Description = &quot;Test slider setting from the addon.&quot;, Type = &quot;Slider&quot;, Default = { Default = 0.5, Min = 0, Max = 1, Slide = .1, }, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) Config:Set({ Name = &quot;TestText&quot;, Description = &quot;Test text setting from the addon.&quot;, Type = &quot;Text&quot;, Default = &quot;Test&quot;, Callback = function(Request, ...) print(Request, ...) return Request.Value end, }) end return Settings   ","version":"Next","tagName":"h2"},{"title":"Commands​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#commands","content":"   Object: Folder   Loads custom commands from a specified folder.  See Command  ","version":"Next","tagName":"h2"},{"title":"Ranks​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#ranks","content":"   Object: ModuleScript   Adds custom ranks into the server with your addon locally.  return { { Name = &quot;TestRank!&quot;, -- Rank name. Rank = 2.2, -- Rank power (0-5) Color = Color3.new(0.662745, 0.705882, 1):ToHex(), -- Rank color. Players = {} -- Players that will have this rank by default. }, { Name = &quot;TestRank2&quot;, Rank = 0.2, Color = Color3.new(0.678431, 0.164706, 1):ToHex(), Players = {} }, }   ","version":"Next","tagName":"h2"},{"title":"UI​","type":1,"pageTitle":"Addon Parameters","url":"/GAdminV2/docs/AddonParameters#ui","content":"   Object: Folder   Loads your own pages into the GAdmin panel.  local UI = {} function UI:Load(player, Builder) for i, Place in ipairs(script:GetChildren()) do Builder:LoadPlace(Place, Place.Frame) end end return UI   Structure:    Where:  Place is the page handler containing the page itself.Frame is the page instance.  Place module:  --== &lt;&lt; Services &gt;&gt; local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Main = ReplicatedStorage.GAdminShared --== local Place = {} Place.Name = &quot;PLACENAME&quot; Place.Previous = function(Location) return Location.Previous end Place.Page = 0 Place.MaxPages = 0 Place.Arguments = { } function Place:Load(UI, Frame, Interface) end function Place:Set(UI, Frame, Page, Arguments, Interface) end function Place:Reload(Page, Interface) end return Place  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}